package com.viu.uknife.visitors;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.sun.source.util.Trees;
import com.sun.tools.javac.code.Flags;
import com.sun.tools.javac.processing.JavacProcessingEnvironment;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.tree.TreeTranslator;
import com.sun.tools.javac.util.Names;

import com.viu.uknife.BindView;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.ElementScanner7;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

/**
 * Created by vasilev.i.u on 26.07.2017.
 */
public class BindViewVisitor extends ElementScanner7<Void, Void> {
  private final CodeBlock.Builder codeBlockBuilder = CodeBlock.builder();
  private final Trees trees;
  private final Messager messager;
  private final Filer filer;
  private final TypeElement typeElement;
  private final TreeMaker treeMaker;
  private final Names names;

  public BindViewVisitor(ProcessingEnvironment env, TypeElement element) {
    super();
    trees = Trees.instance(env);
    messager = env.getMessager();
    filer = env.getFiler();
    typeElement = element;
    final JavacProcessingEnvironment javacEnv = (JavacProcessingEnvironment) env;
    treeMaker = TreeMaker.instance(javacEnv.getContext());
    names = Names.instance(javacEnv.getContext());
  }

  @Override public Void visitVariable(VariableElement e, Void aVoid) {
    final BindView bindView = e.getAnnotation(BindView.class);
    codeBlockBuilder.addStatement("(($T) this).$L = ($T) findViewById($L)",
        ClassName.get(typeElement), e.getSimpleName(), ClassName.get(e.asType()), bindView.value());
    return super.visitVariable(e, aVoid);
  }

  public void brewJava() {
    final TypeSpec typeSpec = TypeSpec.classBuilder(typeElement.getSimpleName() + "$$Proxy")
        .addModifiers(Modifier.ABSTRACT)
        .superclass(ClassName.get(typeElement.getSuperclass()))
        .addOriginatingElement(typeElement)
        .addMethod(MethodSpec.methodBuilder("setContentView")
            .addAnnotation(Override.class)
            .addModifiers(Modifier.PUBLIC)
            .addParameter(TypeName.INT, "layoutResId")
            .addStatement("super.setContentView(layoutResId)")
            .addCode(codeBlockBuilder.build())
            .build())
        .build();
    final JavaFile javaFile =
        JavaFile.builder(typeElement.getEnclosingElement().toString(), typeSpec)
            .addFileComment("Generated by DroidCon processor, do not modify")
            .build();
    try {
      final JavaFileObject sourceFile =
          filer.createSourceFile(javaFile.packageName + "." + typeSpec.name, typeElement);
      try (final Writer writer = new BufferedWriter(sourceFile.openWriter())) {
        javaFile.writeTo(writer);
      }
      JCTree.JCExpression selector = treeMaker.Ident(names.fromString(javaFile.packageName));
      selector = treeMaker.Select(selector, names.fromString(typeSpec.name));
      ((JCTree.JCClassDecl) trees.getTree(typeElement)).extending = selector;
    } catch (IOException e) {
      messager.printMessage(Diagnostic.Kind.ERROR, e.getMessage(), typeElement);
    }
  }
}
